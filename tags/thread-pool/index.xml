<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>thread-pool on Tonghao</title>
    <link>http://localhost:1313/tags/thread-pool/</link>
    <description>Recent content in thread-pool on Tonghao</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 25 Apr 2021 19:16:27 +0800</lastBuildDate><atom:link href="http://localhost:1313/tags/thread-pool/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>A simple thread pool in C&#43;&#43;</title>
      <link>http://localhost:1313/post/a-simple-thread-pool/</link>
      <pubDate>Sun, 25 Apr 2021 19:16:27 +0800</pubDate>
      
      <guid>http://localhost:1313/post/a-simple-thread-pool/</guid>
      <description>A simple thread pool based on, highly inspired by Easy3D
Implement a simple thread pool This thread pool is a consumer/producer queue without the consume API. Users produce task with Push API, which will be consumed by the threads(workers) of the pool.
The code is as follows:
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87  #include &amp;lt;atomic&amp;gt;#include &amp;lt;cassert&amp;gt;#include &amp;lt;chrono&amp;gt;#include &amp;lt;functional&amp;gt;#include &amp;lt;future&amp;gt;#include &amp;lt;iostream&amp;gt;#include &amp;lt;memory&amp;gt;#include &amp;lt;mutex&amp;gt;#include &amp;lt;queue&amp;gt;#include &amp;lt;string&amp;gt;#include &amp;lt;thread&amp;gt;#include &amp;lt;type_traits&amp;gt;#include &amp;lt;utility&amp;gt;#include &amp;lt;vector&amp;gt; class ThreadPool { using task_type = std::function&amp;lt;void()&amp;gt;; public: ThreadPool(size_t num = std:ðŸ§µ:hardware_concurrency()) { for (size_t i = 0; i &amp;lt; num; ++i) { workers_.</description>
    </item>
    
  </channel>
</rss>
